generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id              Int                @id @default(autoincrement())
  firstName       String?            @db.VarChar(100)
  lastName        String?            @db.VarChar(100)
  phone           String?            @unique @db.VarChar(15)
  password        String
  email           String             @unique @db.VarChar(100)
  birthdate       DateTime?
  gender          Gender             @default(MALE)
  workStyle       WorkStyle          @default(ONSITE)
  country         String?
  position        String?
  points          BigInt?            @default(1000)
  streak          Int?
  accType         AccType            @default(ACTIVE)
  jobType         JobType            @default(FULLTIME)
  role            Role               @default(EMPLOYEE)
  status          Status             @default(NORMAL)
  errorLoginCount Int                @default(0) @db.SmallInt
  rndToken        String
  avatar          String?
  departmentId    Int
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  lastCritical    DateTime?
  avgScore        Decimal            @default(1) @db.Decimal(3, 2)
  emotionCount    Int                @default(1)
  emotionSum      Decimal            @default(1) @db.Decimal(6, 2)
  criticalTimes   CriticalEmployee[]
  checkIns        EmotionCheckIn[]
  department      Department         @relation(fields: [departmentId], references: [id], onDelete: Restrict)

  //* Single column indexes
  @@index([departmentId])
  @@index([role])
  @@index([accType])
  @@index([jobType])
  @@index([position])
  @@index([createdAt])
  @@index([avgScore])
  @@index([status])
  //* Two-field combo indexes
  @@index([departmentId, role])
  @@index([departmentId, jobType])
  @@index([departmentId, accType])
  @@index([departmentId, position])
  @@index([departmentId, status])
  @@index([role, accType])
  @@index([jobType, accType])
  @@index([accType, position])
  @@index([departmentId, avgScore])
  @@index([status, avgScore])
  //* Three-field combo indexes
  @@index([departmentId, role, accType])
  @@index([departmentId, jobType, accType])
  @@index([departmentId, role, jobType])
  @@index([departmentId, status, avgScore])
  @@index([role, jobType, accType])
  @@index([departmentId, accType, position])
  //* Search optimization indexes
  @@index([firstName, lastName])
  @@index([email])
}

model Otp {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(100)
  otp           String
  rememberToken String
  count         Int      @default(0) @db.SmallInt
  error         Int      @default(0) @db.SmallInt
  verifyToken   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EmotionCheckIn {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  emoji        String
  textFeeling  String   @db.Text
  points       BigInt?
  emotionScore Decimal  @db.Decimal(3, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  //* Single column indexes
  @@index([employeeId])
  @@index([emotionScore])
  @@index([createdAt])
  //* Two-field combo indexes
  @@index([employeeId, createdAt])
  @@index([employeeId, emotionScore])
  @@index([emotionScore, createdAt])
  @@index([createdAt, emotionScore])
  //* Three-field combo indexes
  @@index([employeeId, createdAt, emotionScore])
}

model CriticalEmployee {
  id           Int        @id @default(autoincrement())
  employeeId   Int
  departmentId Int
  emotionScore Decimal    @db.Decimal(3, 2)
  isResolved   Boolean    @default(false)
  resolvedAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)

  analysis   AIAnalysis?
  actionPlan ActionPlan?

  //* Single column indexes
  @@index([employeeId])
  @@index([departmentId])
  @@index([isResolved])
  @@index([createdAt])
  @@index([resolvedAt])
  //* Two-field combo indexes
  @@index([departmentId, isResolved])
  @@index([departmentId, createdAt])
  @@index([isResolved, createdAt])
  @@index([employeeId, createdAt])
  @@index([employeeId, isResolved])
  //* Three-field combo indexes
  @@index([departmentId, isResolved, createdAt])
  @@index([employeeId, isResolved, createdAt])
}

model AIAnalysis {
  id              Int              @id @default(autoincrement())
  criticalId      Int              @unique
  weekRange       String
  overallMood     String           @db.Text
  moodTrend       String           @db.Text
  keyInsights     String[]
  recommendations String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  critical        CriticalEmployee @relation(fields: [criticalId], references: [id], onDelete: Cascade)
}

model Notification {
  id           Int        @id @default(autoincrement())
  departmentId Int
  content      String     @db.Text
  avatar       String?
  status       NotiStatus @default(SENT)
  type         NotifType  @default(CRITICAL)
  toSAdmin     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model Department {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(100)
  description       String?            @db.Text
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  employees         Employee[]
  actionPlans       ActionPlan[]
  notifications     Notification[]
  criticalEmployees CriticalEmployee[]
}

model ActionPlan {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  criticalId    Int       @unique
  departmentId  Int
  contact       String?
  actionType    String    @db.VarChar(100)
  priority      Priority  @default(MEDIUM)
  assignTo      String    @db.VarChar(100)
  dueDate       DateTime
  actionNotes   String    @db.Text
  followUpNotes String    @db.Text
  quickAction   String?   @db.Text
  suggestions   String?   @db.Text
  status        RStatus   @default(PENDING)
  type          RType     @default(PENDING)
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  criticalEmployee CriticalEmployee @relation(fields: [criticalId], references: [id], onDelete: Cascade)
  department       Department       @relation(fields: [departmentId], references: [id], onDelete: Restrict)

  //* Single column indexes
  @@index([criticalId])
  @@index([departmentId])
  @@index([status])
  @@index([priority])
  @@index([actionType])
  @@index([createdAt])
  @@index([dueDate])
  @@index([completedAt])
  //* Two-field combo indexes
  @@index([departmentId, status])
  @@index([departmentId, priority])
  @@index([departmentId, createdAt])
  @@index([status, createdAt])
  @@index([status, priority])
  @@index([status, dueDate])
  @@index([priority, createdAt])
  @@index([actionType, status])
  @@index([criticalId, createdAt])
  //* Three-field combo indexes
  @@index([departmentId, status, createdAt])
  @@index([departmentId, status, priority])
  @@index([departmentId, actionType, status])
  @@index([status, priority, createdAt])
  @@index([status, priority, dueDate])
  @@index([departmentId, priority, createdAt])
  //* Four-field combo index for complex filters
  @@index([departmentId, status, priority, createdAt])
}

model EmotionCategory {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emotions Emotion[]

  @@map("emotion_categories")
}

model Emotion {
  id        Int      @id @default(autoincrement())
  icon      String
  label     String
  image     String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId Int
  category   EmotionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, label])
  @@index([categoryId])
  @@map("emotions")
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(100)
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RType {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum RStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  EMPLOYEE
  ADMIN
  SUPERADMIN
}

enum AccType {
  ACTIVE
  FREEZE
}

enum JobType {
  FULLTIME
  PARTTIME
  CONTRACT
  INTERNSHIP
}

enum Status {
  NORMAL
  CRITICAL
  WATCHLIST
}

enum NotiStatus {
  SENT
  READ
}

enum NotifType {
  CRITICAL
  REQUEST
  RESPONSE
  UPDATE
  NORMAL
  REJECTED_DELETE
}

enum WorkStyle {
  REMOTE
  ONSITE
  HYBRID
  WFH
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}
