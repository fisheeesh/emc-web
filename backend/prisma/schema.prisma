// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id              Int                @id @default(autoincrement())
  firstName       String?            @db.VarChar(52)
  lastName        String?            @db.VarChar(52)
  phone           String?            @unique @db.VarChar(15)
  password        String
  email           String             @unique @db.VarChar(52)
  emotionSum      Decimal            @default(0) @db.Decimal(3, 2)
  emotionCount    Int                @default(0)
  avgScore        Decimal            @default(0) @db.Decimal(3, 2)
  role            Role               @default(EMPLOYEE)
  status          Status             @default(ACTIVE)
  lastCritical    DateTime?
  errorLoginCount Int                @default(0) @db.SmallInt
  rndToken        String
  avatar          String?
  departmentId    Int
  department      Department         @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  checkIns        EmotionCheckIn[]
  criticalTimes   CriticalEmployee[]
}

model Otp {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(15)
  otp           String
  rememberToken String
  count         Int      @default(0) @db.SmallInt
  error         Int      @default(0) @db.SmallInt
  verifyToken   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EmotionCheckIn {
  id           Int      @id @default(autoincrement())
  emoji        String
  textFeeling  String
  emotionScore Decimal  @default(0) @db.Decimal(3, 2)
  employeeId   Int
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CriticalEmployee {
  id           Int          @id @default(autoincrement())
  status       Status       @default(ACTIVE)
  emotionScore Decimal      @default(0) @db.Decimal(3, 2)
  employeeId   Int
  employee     Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  analyses     AIAnalysis[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model AIAnalysis {
  id         Int              @id @default(autoincrement())
  input      String
  output     String
  criticalId Int
  critical   CriticalEmployee @relation(fields: [criticalId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Notification {
  id        Int        @id @default(autoincrement())
  content   String     @db.VarChar(255)
  status    NotiStatus @default(SENT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(52)
  employees Employee[]
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique @db.VarChar(50)
  value String @db.VarChar(200)
}

enum Role {
  EMPLOYEE
  ADMIN
  SUPERADMIN
}

enum Status {
  ACTIVE
  CRITICAL
  WATCHLIST
  FREEZE
}

enum NotiStatus {
  SENT
  READ
}
